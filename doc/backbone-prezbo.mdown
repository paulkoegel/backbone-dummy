Backbone
========

JavaScript MVC

Pros
----
+ active community & widely used
+ mature (initial commit: Sep 30, 2010)
+ good documentation & many great tutorials
+ lightweight (6kB, v0.9.2)
+ templating engine agnostic (HAMLc, underscore templates, handlebars, eco, jade etc.)

Cons
----
- rather barebone, lacking esp. View functionality and conventions for larger JS apps
- rather verbose to set up View behaviour
- lacks Model-View bindings

* can use either jQuery or Zepto for interaction with the DOM
* requires Underscore.js


Components
----------
* Models
* Collections
* Views
* Router (formerly known as Controller)
* Templates


Model
-----
<code>
  class DB.User extends Backbone.Model
    urlRoot: '/users'

    defaults:
      avatar: 'default-avatar.png'
      isAdmin: false
    
    slug: ->
      @get('firstName') + ' ' + @get('lastName')
    
    initialize: ->
      @bind 'change:firstName change:lastName', ->
        Backbone.sync 'update', @, {}
</code>


Collection
----------

<code>
  class DB.Users extends Backbone.Collection
    model: DB.User

    admins: ->
      @filter (user) ->
        user.get('isAdmin')
</code>


View
----
- defines how a model's representation is created
- handles user interaction
- multiple views can subscribe to the same model

<code>
  class DB.UserShow extends Backbone.View
    tagName: 'div'
    className: 'm-post'

    initialize: ->
      @template = JST['posts/show']
      _.bindAll @, 'render'
      @model.on 'change', @render

    render: ->
      $(@el).html(@template @model.toJSON())
      @

    events:
      'blur .m-post--headline[contenteditable]': (event) ->
        @model.set 'title', $(event.currentTarget).text()
      'blur .m-post--text[contenteditable]': (event) ->
        @model.set 'text', $(event.currentTarget).text()
</code>


Router
-------

<code>

  DB.appRouter.navigate('blank', true)

</code>


Guided Tour
===========
[Backbone dummy](http://backbone-dummy.herokuapp.com)


Upcoming
--------
+ How to test all this Javascript with Jasmine, PhantomJS, and so on


Appendix
========

Folder Structure
----------------
* app/
  + assets/
    - javascripts/
      * backbone/
        + collections/
          - posts.js.coffee
        + models/
          - post.js.coffee
        + routers/
          - app\_router.js.coffee
        + views/
          - post.js.coffee
          - post\_box.js.coffee
          - posts.js.coffee
      * templates/
        + posts/
          - box.hamlc
          - index.hamlc
          - show.hamlc
      *  application.js.coffee
      *  initialisation.js.coffee
      *  posts.js.coffee


Extensions
----------
* [Backbone Marionette](github.com/derickbailey/backbone.marionette)
Composite application architecture. Better view handling and unbinding. Alternative to 9elements' Chaplin but more mature.

* [Backbone Relational](github.com/PaulUithol/Backbone-relational)
Hierarchies of Backbone Models - has many relations etc.

* [Backbone Model Binder](github.com/theironcook/Backbone.ModelBinder)
  provides Model-View bindings. 

* [HAML Coffee Assets](github.com/netzpirat/haml_coffee_assets)
  Backbone templates with HAML syntax. After '-' and '=' you'll be writing CoffeeScript instead of Ruby.
  

Resources
---------
* [www.backbonejs.org](http://www.backbonejs.org)

* [Annotated source](http://backbonejs.org/docs/backbone.html)

* Osmani, Addy. _Developing Backbone.js Applications_ (work in progress). [https://github.com/addyosmani/backbone-fundamentals](https://github.com/addyosmani/backbone-fundamentals).

* 3-part Peepcode screencast series: [https://peepcode.com/products/backbone-js](https://peepcode.com/products/backbone-js)

* Overview of Backbone Architecture Libraries
  Schäfer, Mathias. 2012-05-10. "Application frameworks on top of Backbone.js. A birds-eye view of the similarities of Chaplin, Marionette and Thorax/Lumbar". [https://speakerdeck.com/u/molily/p/application-frameworks-on-top-of-backbonejs-talk-at-appsberlinjs](https://speakerdeck.com/u/molily/p/application-frameworks-on-top-of-backbonejs-talk-at-appsberlinjs)

* Overview of Javascript MVC frameworks
  Osmani, Addy. 2012-07-27. "Journey Through The JavaScript MVC Jungle". [http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle](http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle)


History of MVC
--------------
designed by Trygve Reenskaug in 1979 while working on Smalltalk-80:
  - called it "Model-View-Controller-Editor"
  - View-Controller pair required for each element on the screen; no true separation
  - Controller’s role: handling user input
  - observer pattern: Views and Controllers subscribe to Models
  - the View is automatically updated whenever the Model changes
